{"version":3,"file":"component---src-pages-game-tsx-53094a383010af391d58.js","mappings":"2KAQA,MAAMA,EAAuBC,EAAAA,GAAYC,EAAQ,MAAc,KAEzDC,EAAM,KACV,MAAMC,EAAY,IAAIC,EAAAA,EAEhBC,GAAYC,EAAAA,EAAAA,UAClB,IAAIC,EAmBJ,OAjBAC,EAAAA,EAAAA,YAAU,KACRC,OAAOC,iBAAiB,UAAWP,EAAUQ,UAAUC,KAAKT,IAE5DI,EAAS,IAAIR,EAAOM,EAAUQ,SAC9BN,EAAOO,GAAG,MAAOX,EAAUY,MAAMH,KAAKT,IACtCI,EAAOO,GAAG,QAASX,EAAUa,QAAQJ,KAAKT,IAC1CI,EAAOO,GAAG,UAAWX,EAAUc,UAAUL,KAAKT,IAEvC,KACLM,OAAOS,oBAAoB,UAAWf,EAAUQ,UAAUC,KAAKT,IAE/DI,EAAOY,IAAI,MAAOhB,EAAUY,MAAMH,KAAKT,IACvCI,EAAOY,IAAI,QAAShB,EAAUa,QAAQJ,KAAKT,IAC3CI,EAAOY,IAAI,UAAWhB,EAAUc,UAAUL,KAAKT,OAEhD,IAGD,gBAAC,aAAD,CAA+BiB,MAAOjB,GACpC,gBAAC,IAAD,CACEkB,GAAI,CAEFC,QAAS,OACTC,iBAAkB,cAGlBC,SAAU,WACVC,OAAQ,OACRC,UAAW,MACXC,MAAO,OACPC,SAAU,MACVC,UAAW,aACXC,KAAM,aAKR,gBAAC,KAAD,CACEC,iBAAkB5B,EAAU6B,kBAAkBpB,KAAKT,GACnD8B,wBAAyB9B,EAAU6B,kBAAkBpB,KAAKT,KAE5D,gBAAC,IAAD,CACE+B,IAAK7B,EACLgB,GAAI,CACFc,QAAS,EACTX,SAAU,aAGZ,gBAAC,KAAD,UAOVtB,EAAIkC,OAASC,EAAAA,GAEb","sources":["webpack://periotrisjs/./src/pages/game.tsx"],"sourcesContent":["import { isBrowser } from \"is-in-browser\"\nimport React, { useEffect, useRef } from \"react\"\n\nimport { Box } from \"@mui/material\"\n\nimport { BlocksGrid, CommonLayout, GameControlBackdrop } from \"../components\"\nimport { GameViewModel, GameViewModelContext } from \"../viewmodel\"\n\nconst Hammer: HammerStatic = isBrowser ? require(\"hammerjs\") : null\n\nconst App = (): React.ReactElement => {\n  const viewModel = new GameViewModel()\n\n  const rowTwoRef = useRef<HTMLElement>()\n  let hammer: HammerManager\n\n  useEffect(() => {\n    window.addEventListener(\"keydown\", viewModel.onKeyDown.bind(viewModel))\n\n    hammer = new Hammer(rowTwoRef.current as HTMLElement)\n    hammer.on(\"tap\", viewModel.onTap.bind(viewModel))\n    hammer.on(\"swipe\", viewModel.onSwipe.bind(viewModel))\n    hammer.on(\"pressup\", viewModel.onPressUp.bind(viewModel))\n\n    return () => {\n      window.removeEventListener(\"keydown\", viewModel.onKeyDown.bind(viewModel))\n\n      hammer.off(\"tap\", viewModel.onTap.bind(viewModel))\n      hammer.off(\"swipe\", viewModel.onSwipe.bind(viewModel))\n      hammer.off(\"pressup\", viewModel.onPressUp.bind(viewModel))\n    }\n  }, [])\n\n  return (\n    <GameViewModelContext.Provider value={viewModel}>\n      <Box\n        sx={{\n          /* display-related props */\n          display: \"grid\",\n          gridTemplateRows: \"1fr 80% 1fr\",\n\n          /* layouts: width, height, margin, padding, etc.*/\n          position: \"relative\",\n          height: \"100%\",\n          minHeight: \"0px\",\n          width: \"100%\",\n          minWidth: \"0px\",\n          boxSizing: \"border-box\",\n          flex: \"1 1 auto\" /* For CommonLayout.tsx headers */,\n\n          /* element-specific props */\n        }}\n      >\n        <GameControlBackdrop\n          startGameHandler={viewModel.invokeGameControl.bind(viewModel)}\n          pauseUnpauseGameHandler={viewModel.invokeGameControl.bind(viewModel)}\n        />\n        <Box\n          ref={rowTwoRef}\n          sx={{\n            gridRow: 2,\n            position: \"relative\",\n          }}\n        >\n          <BlocksGrid />\n        </Box>\n      </Box>\n    </GameViewModelContext.Provider>\n  )\n}\n\nApp.Layout = CommonLayout\n\nexport default App\n"],"names":["Hammer","isBrowser","require","App","viewModel","GameViewModel","rowTwoRef","useRef","hammer","useEffect","window","addEventListener","onKeyDown","bind","current","on","onTap","onSwipe","onPressUp","removeEventListener","off","value","sx","display","gridTemplateRows","position","height","minHeight","width","minWidth","boxSizing","flex","startGameHandler","invokeGameControl","pauseUnpauseGameHandler","ref","gridRow","Layout","CommonLayout"],"sourceRoot":""}