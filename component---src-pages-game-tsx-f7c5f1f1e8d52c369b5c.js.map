{"version":3,"file":"component---src-pages-game-tsx-f7c5f1f1e8d52c369b5c.js","mappings":"qLAeA,MAAMA,EAAuBC,EAAAA,GAAYC,EAAQ,MAAc,KAEzDC,EAAM,KACV,MAAMC,EAAY,IAAIC,EAAAA,EAEhBC,GAAYC,EAAAA,EAAAA,UAClB,IAAIC,EAmBJ,OAjBAC,EAAAA,EAAAA,YAAU,KACRC,OAAOC,iBAAiB,UAAWP,EAAUQ,UAAUC,KAAKT,IAE5DI,EAAS,IAAIR,EAAOM,EAAUQ,SAC9BN,EAAOO,GAAG,MAAOX,EAAUY,MAAMH,KAAKT,IACtCI,EAAOO,GAAG,QAASX,EAAUa,QAAQJ,KAAKT,IAC1CI,EAAOO,GAAG,UAAWX,EAAUc,UAAUL,KAAKT,IAEvC,KACLM,OAAOS,oBAAoB,UAAWf,EAAUQ,UAAUC,KAAKT,IAE/DI,EAAOY,IAAI,MAAOhB,EAAUY,MAAMH,KAAKT,IACvCI,EAAOY,IAAI,QAAShB,EAAUa,QAAQJ,KAAKT,IAC3CI,EAAOY,IAAI,UAAWhB,EAAUc,UAAUL,KAAKT,OAEhD,IAGD,gBAAC,aAAD,CAAoCiB,MAAOjB,GACzC,gBAAC,KAAD,CACEkB,aAAc,CACZC,SAAU,SACVC,WAAY,WAGd,gBAAC,IAAD,CACEC,GAAI,CAC0BC,QAAS,OACrCC,iBAAkB,cAGlBC,SAAU,WACVC,OAAQ,OACRC,UAAW,MACXC,MAAO,OACPC,SAAU,MACVC,UAAW,aACXC,KAAM,aAMR,gBAAC,KAAD,MACA,gBAAC,IAAD,CACEC,UAAU,mBACVC,IAAK9B,EACLmB,GAAI,CACFY,QAAS,EACTT,SAAU,aAGZ,gBAAC,KAAD,OAEF,gBAAC,KAAD,MACA,gBAAC,KAAD,CACEU,QAASlC,EAAUmC,kBAAkB1B,KAAKT,SAQtDD,EAAIqC,OAASC,EAAAA,GAEb","sources":["webpack://periotrisjs/./src/pages/game.tsx"],"sourcesContent":["import { isBrowser } from \"is-in-browser\"\nimport { SnackbarProvider } from \"notistack\"\nimport React, { useEffect, useRef } from \"react\"\n\nimport { Box } from \"@mui/material\"\n\nimport {\n  BlocksGrid,\n  CommonLayout,\n  GameControlButton,\n  PortraitWarningBackdrop,\n  SnackbarPopper,\n} from \"../components\"\nimport { PeriotrisViewModel, PeriotrisViewModelContext } from \"../viewmodel\"\n\nconst Hammer: HammerStatic = isBrowser ? require(\"hammerjs\") : null\n\nconst App = (): React.ReactElement => {\n  const viewModel = new PeriotrisViewModel()\n\n  const rowTwoRef = useRef<HTMLElement>()\n  let hammer: HammerManager\n\n  useEffect(() => {\n    window.addEventListener(\"keydown\", viewModel.onKeyDown.bind(viewModel))\n\n    hammer = new Hammer(rowTwoRef.current as HTMLElement)\n    hammer.on(\"tap\", viewModel.onTap.bind(viewModel))\n    hammer.on(\"swipe\", viewModel.onSwipe.bind(viewModel))\n    hammer.on(\"pressup\", viewModel.onPressUp.bind(viewModel))\n\n    return () => {\n      window.removeEventListener(\"keydown\", viewModel.onKeyDown.bind(viewModel))\n\n      hammer.off(\"tap\", viewModel.onTap.bind(viewModel))\n      hammer.off(\"swipe\", viewModel.onSwipe.bind(viewModel))\n      hammer.off(\"pressup\", viewModel.onPressUp.bind(viewModel))\n    }\n  }, [])\n\n  return (\n    <PeriotrisViewModelContext.Provider value={viewModel}>\n      <SnackbarProvider\n        anchorOrigin={{\n          vertical: \"bottom\",\n          horizontal: \"center\",\n        }}\n      >\n        <Box\n          sx={{\n            /* display-related props */ display: \"grid\",\n            gridTemplateRows: \"1fr 80% 1fr\",\n\n            /* layouts: width, height, margin, padding, etc.*/\n            position: \"relative\",\n            height: \"100%\",\n            minHeight: \"0px\",\n            width: \"100%\",\n            minWidth: \"0px\",\n            boxSizing: \"border-box\",\n            flex: \"1 1 auto\" /* For CommonLayout.tsx headers */,\n\n            /* element-specific props */\n            /* background-color to be filled */\n          }}\n        >\n          <PortraitWarningBackdrop />\n          <Box\n            className=\"game-page__row-2\"\n            ref={rowTwoRef}\n            sx={{\n              gridRow: 2,\n              position: \"relative\",\n            }}\n          >\n            <BlocksGrid />\n          </Box>\n          <SnackbarPopper />\n          <GameControlButton\n            onClick={viewModel.invokeGameControl.bind(viewModel)}\n          />\n        </Box>\n      </SnackbarProvider>\n    </PeriotrisViewModelContext.Provider>\n  )\n}\n\nApp.Layout = CommonLayout\n\nexport default App\n"],"names":["Hammer","isBrowser","require","App","viewModel","PeriotrisViewModel","rowTwoRef","useRef","hammer","useEffect","window","addEventListener","onKeyDown","bind","current","on","onTap","onSwipe","onPressUp","removeEventListener","off","value","anchorOrigin","vertical","horizontal","sx","display","gridTemplateRows","position","height","minHeight","width","minWidth","boxSizing","flex","className","ref","gridRow","onClick","invokeGameControl","Layout","CommonLayout"],"sourceRoot":""}